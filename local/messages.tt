#class {messages}{kill}
#class {messages}{open}

#alias {reloadM} {#class messages kill; #read messages.tt}

#nop {
    Relies on base.tt to set up config variable.  Reacts to messages by
modifying global state variables.

  TODO: check to see if base.tt is loaded and generate an error message
        if not.
}

#event {RECEIVED OUTPUT} { #var {state[receivedOutput]} $TRUE }

#nop {person or mob, hit 'enter' to get more info}
#act {enters the arena through the dungeon gate} { #send {} }

#act {The waterskin is empty} {#var {state[noWater]} {$TRUE}}
#act {You don't seem to have one of those} {#var {state[noFood]} {$TRUE}}

#act {Attack ready!} {#var {state[physTick]} 0}
#act {Spell ready!} {#var {state[spellTick]} 0}

#act {You're thirsty.} {#var {state[thirsty]} {$TRUE}}
#act {You're hungry.} {#var {state[hungry]} {$TRUE}}

#act {There is a%? %w%? %*here.} { #var {state[cur_mob]} %2}
#nop strip last characters of multy-mobs to account for es / ies
#nop thos letter will prevent attacks
#act {There are %w %w%?%?%? %*here.} { #var {state[cur_mob]} %2}
#act {There is nobody here.} { #var {state[cur_mob]} "0"}
#act {enters the arena through the dungeon gate} { #send {} }
#act {A %1 appears in a puff of reddish smoke} { #send {}}
#act {%1 is asking to join your group.} {add %1}
#act {The %1 falls to the ground lifeless} {#var {state[cur_mob]} "0" }
#nop #act {From %1: %2} { }

#alias {co} {#var {state[combatOff]} $TRUE}
#alias {con} {#var {state[combatOff]} $FALSE}
#act {You're in the north plaza} {#var {state[combatOff]} $TRUE};
#nop {
  #act {The %1 attacked you, but} {#var combatOff 0};
  #act {The %1 attacked you } {#var combatOff 0};
  #act {You're in the arena} {#var combatOff 0; #var inArena 1};
  
  #act {You're in the south plaza} {#var combatOff 1};
}

#act {^You're in the %1.$} {
  #regexp {%1} {arena} {
    #var {state[inArena]} $TRUE;
	#var {state[combatOff]} $FALSE
  } {
    #var {state[inArena]} $FALSE
  }
}

#act {Type 'STATBAR' for a list of statbar options.} {
    #showme {Setting statbar};
    #send {statbar 0 on};
    #send {statbar 1 on};
    #send {statbar 2 on};
    #send {statbar 3 on};
    #send {statbar 4 on};
    #send {statbar 5 off};
    #send {statbar 6 on}
}

#act {HP:%d/%d MA:%d/%d LV:%d EXP:%d EX:%*]$}
{
    #var {state[curHP]} {%1};
    #var {state[curMP]} {%3};
    #var {state[maxHP]} {%2};
    #var {state[maxMP]} {%4};
    #math {state[hpp]} {$state[curHP] * 100 / $state[maxHP]};
    #math {state[mpp]} {$state[curMP] * 100 / $state[maxMP]};
    #var {state[exp]}  {%6};
	#var {state[exits]} {%7}
};

#nop TEMPORARY until scrolls fixed

#act {^The %1 dropped a scroll of %2} { #send {drop scroll} }
#nop abort on below?
#act {Sorry, there's no exit in that direction.} {#nop}
#act {Sorry, you'll have to rest a while before you can move.} {
  #var {state[moveOK]} $FALSE;
  #echo {Tired - Move Failed!}
}

#act {In your haste, you trip and fall!} {
  #var {state[moveOK]} $FALSE;
  #echo {Hasty - Move Failed!}
}

#act {You must rest a moment before proceeding} {
  #var {state[lastCommandOK]} $FALSE;
  #echo {Command Overflow - Move Failed!}
}

#NOP 2019-12-28 -- added for failed movement on arcticzone bbs
#act {^You are still physically exhausted from your previous activities!} {
  #var {state[lastCommandOK]} $FALSE;
  #var {state[physTick]} 15
}
#act {^Your attack hit} {#var {state[physTick]} 15};
#act {^Your skillful attack} {#var {state[physTick]} 15};
#act {^Your attack missed} {#var {state[physTick]} 15};
#act {^Sorry, you don't see} {#var {state[cur_mob]} "0"};
#act {dodged your attack} { #var {state[physTick]} 15 }

#NOP 2020-11-26 - copied from older messages.tt for non arctic boards
#function check_suppress {
  #if { $suppress:status == $TRUE } {
    #line gag
  };
  #return #nop
}
#nop { 
  TODO: How to do a generic toggle function to call like:
    @toogle{suppress:status}
}

#alias suppress { 
  #if {$suppress:status == $TRUE } { 
    #var suppress:status $FALSE
  }; 
  else{
    #var suppress:status $TRUE
  }
}

#alias sst {
  #var supress:status $FALSE;
  st;
  #var supress:status $TRUE
}

#nop HHHHH: status
#act {Level:        %1} { @check_suppress{}; #var state[level] %1}
#act {Experience:   %1} { @check_suppress{}; #var state[experience] %1}
#act {Rune:         %1} { @check_suppress{}; #var state[rune] %1}
#act {Status:       %1} { @check_suppress{}; #var state[status] %1}
#act {Race:         %1} { @check_suppress{}; #var status[race] %1}
#act {Class:        %1} { @check_suppress{}; #var status[class] %1}
#act {Intellect:    %1} { @check_suppress{}; #var status[int] %1}
#act {Knowledge:    %1} { @check_suppress{}; #var status[know] %1}
#act {Physique:     %1} { @check_suppress{}; #var status[phys] %1}
#act {Stamina:      %1} { @check_suppress{}; #var status[stam] %1}
#act {Agility:      %1} { @check_suppress{}; #var status[agil] %1}
#act {Charisma:     %1} { @check_suppress{}; #var status[char] %1}
#act {Armor Rating: %1} { @check_suppress{}; #var status[ar] %1 }
#act {Weapon:       %1} { @check_suppress{}; #var status[weapon] %1}
#act {Armor:        %1} { @check_suppress{}; #var status[armor] %1}
#act {Encumberance: %1} { @check_suppress{}; #var status[enc] %1}
#act {Mana:         %d / %d} 
{
  @check_suppress{};
  #var state[curMP] %1; 
  #var state[maxMP] %2;
  #math state[mpp] { $state[cur_mana] * 100 / $state[max_mana] };
}

#act {Vitality:     %d / %d} 
{
  @check_suppress{};
  #var state[curHP] %1; 
  #var state[maxHP] %2;
  #math state[hpp] { $state[cur_health] * 100 / $state[max_health] };
}

#class {messages}{close}